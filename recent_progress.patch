diff --git a/arrays_strings/compress/compress_challenge.ipynb b/arrays_strings/compress/compress_challenge.ipynb
index bb34c1b..6adba61 100644
--- a/arrays_strings/compress/compress_challenge.ipynb
+++ b/arrays_strings/compress/compress_challenge.ipynb
@@ -75,15 +75,34 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 25,
    "metadata": {},
    "outputs": [],
    "source": [
     "class CompressString(object):\n",
     "\n",
     "    def compress(self, string):\n",
-    "        # TODO: Implement me\n",
-    "        pass"
+    "        if string == None or len(string) < 3:\n",
+    "            return string\n",
+    "        previous_char = ''\n",
+    "        compressed_string = []\n",
+    "        char_count = 1\n",
+    "        for char in string:\n",
+    "            if char == previous_char:\n",
+    "                char_count += 1\n",
+    "            else:\n",
+    "                if char_count > 1:\n",
+    "                    compressed_string.append(str(char_count))\n",
+    "                    char_count = 1\n",
+    "                compressed_string.append(char)\n",
+    "                previous_char = char\n",
+    "            print(compressed_string)\n",
+    "        if char_count > 1:\n",
+    "            compressed_string.append(str(char_count))\n",
+    "        if len(compressed_string) < len(string):\n",
+    "            return ''.join(compressed_string)\n",
+    "        else:\n",
+    "            return string"
    ]
   },
   {
@@ -104,9 +123,56 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 26,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "['A']\n",
+      "['A']\n",
+      "['A', '2', 'B']\n",
+      "['A', '2', 'B']\n",
+      "['A', '2', 'B', '2', 'C']\n",
+      "['A', '2', 'B', '2', 'C']\n",
+      "['A']\n",
+      "['A']\n",
+      "['A']\n",
+      "['A', '3', 'B']\n",
+      "['A', '3', 'B', 'C']\n",
+      "['A', '3', 'B', 'C']\n",
+      "['A', '3', 'B', 'C', '2', 'D']\n",
+      "['A', '3', 'B', 'C', '2', 'D']\n",
+      "['A', '3', 'B', 'C', '2', 'D']\n",
+      "['A', '3', 'B', 'C', '2', 'D']\n",
+      "['A', '3', 'B', 'C', '2', 'D', '4', 'E']\n",
+      "['B']\n",
+      "['B', 'A']\n",
+      "['B', 'A']\n",
+      "['B', 'A']\n",
+      "['B', 'A', '3', 'C']\n",
+      "['B', 'A', '3', 'C']\n",
+      "['B', 'A', '3', 'C', '2', 'D']\n",
+      "['B', 'A', '3', 'C', '2', 'D']\n",
+      "['B', 'A', '3', 'C', '2', 'D']\n",
+      "['B', 'A', '3', 'C', '2', 'D']\n",
+      "['A']\n",
+      "['A']\n",
+      "['A']\n",
+      "['A', '3', 'B']\n",
+      "['A', '3', 'B', 'A']\n",
+      "['A', '3', 'B', 'A']\n",
+      "['A', '3', 'B', 'A', '2', 'C']\n",
+      "['A', '3', 'B', 'A', '2', 'C']\n",
+      "['A', '3', 'B', 'A', '2', 'C', '2', 'D']\n",
+      "['A', '3', 'B', 'A', '2', 'C', '2', 'D']\n",
+      "['A', '3', 'B', 'A', '2', 'C', '2', 'D']\n",
+      "['A', '3', 'B', 'A', '2', 'C', '2', 'D']\n",
+      "Success: test_compress\n"
+     ]
+    }
+   ],
    "source": [
     "# %load test_compress.py\n",
     "import unittest\n",
@@ -146,7 +212,7 @@
  ],
  "metadata": {
   "kernelspec": {
-   "display_name": "Python 3",
+   "display_name": "Python 3 (ipykernel)",
    "language": "python",
    "name": "python3"
   },
@@ -160,7 +226,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.7.2"
+   "version": "3.10.6"
   }
  },
  "nbformat": 4,
diff --git a/arrays_strings/compress_alt/better_compress_challenge.ipynb b/arrays_strings/compress_alt/better_compress_challenge.ipynb
index 7efb098..9a5220a 100644
--- a/arrays_strings/compress_alt/better_compress_challenge.ipynb
+++ b/arrays_strings/compress_alt/better_compress_challenge.ipynb
@@ -145,7 +145,7 @@
  ],
  "metadata": {
   "kernelspec": {
-   "display_name": "Python 3",
+   "display_name": "Python 3 (ipykernel)",
    "language": "python",
    "name": "python3"
   },
@@ -159,7 +159,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.7.2"
+   "version": "3.10.6"
   }
  },
  "nbformat": 4,
diff --git a/arrays_strings/fizz_buzz/fizz_buzz_challenge.ipynb b/arrays_strings/fizz_buzz/fizz_buzz_challenge.ipynb
index a232427..59b82b7 100644
--- a/arrays_strings/fizz_buzz/fizz_buzz_challenge.ipynb
+++ b/arrays_strings/fizz_buzz/fizz_buzz_challenge.ipynb
@@ -93,15 +93,27 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 7,
    "metadata": {},
    "outputs": [],
    "source": [
     "class Solution(object):\n",
     "\n",
     "    def fizz_buzz(self, num):\n",
-    "        # TODO: Implement me\n",
-    "        pass"
+    "        if int(num) < 1:\n",
+    "            raise ValueError\n",
+    "        encoded_list = []\n",
+    "        for i in range(1, int(num)+1):\n",
+    "            if (not i % 3) and (not i % 5):\n",
+    "                encoded_list.append('FizzBuzz')\n",
+    "            elif not i % 3:\n",
+    "                encoded_list.append('Fizz')\n",
+    "            elif not i % 5:\n",
+    "                encoded_list.append('Buzz')\n",
+    "            else:\n",
+    "                encoded_list.append(str(i))\n",
+    "        return encoded_list\n",
+    "            "
    ]
   },
   {
@@ -120,9 +132,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 8,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Success: test_fizz_buzz\n"
+     ]
+    }
+   ],
    "source": [
     "# %load test_fizz_buzz.py\n",
     "import unittest\n",
@@ -172,11 +192,25 @@
     "\n",
     "Review the [Solution Notebook](http://nbviewer.ipython.org/github/donnemartin/interactive-coding-challenges/blob/master/arrays_strings/fizz_buzz/fizz_buzz_solution.ipynb) for a discussion on algorithms and code solutions."
    ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
   }
  ],
  "metadata": {
   "kernelspec": {
-   "display_name": "Python 3",
+   "display_name": "Python 3 (ipykernel)",
    "language": "python",
    "name": "python3"
   },
@@ -190,7 +224,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.7.2"
+   "version": "3.10.6"
   }
  },
  "nbformat": 4,
diff --git a/arrays_strings/fizz_buzz/fizz_buzz_solution.ipynb b/arrays_strings/fizz_buzz/fizz_buzz_solution.ipynb
index 84b938d..61a9a88 100644
--- a/arrays_strings/fizz_buzz/fizz_buzz_solution.ipynb
+++ b/arrays_strings/fizz_buzz/fizz_buzz_solution.ipynb
@@ -216,7 +216,7 @@
  ],
  "metadata": {
   "kernelspec": {
-   "display_name": "Python 3",
+   "display_name": "Python 3 (ipykernel)",
    "language": "python",
    "name": "python3"
   },
@@ -230,7 +230,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.7.2"
+   "version": "3.10.6"
   }
  },
  "nbformat": 4,
diff --git a/arrays_strings/hash_map/hash_map_challenge.ipynb b/arrays_strings/hash_map/hash_map_challenge.ipynb
index 7dbe007..c33f25f 100644
--- a/arrays_strings/hash_map/hash_map_challenge.ipynb
+++ b/arrays_strings/hash_map/hash_map_challenge.ipynb
@@ -78,38 +78,56 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 8,
    "metadata": {},
    "outputs": [],
    "source": [
     "class Item(object):\n",
     "\n",
     "    def __init__(self, key, value):\n",
-    "        # TODO: Implement me\n",
-    "        pass\n",
+    "        self.key = key\n",
+    "        self.value = value\n",
     "\n",
     "\n",
     "class HashTable(object):\n",
     "\n",
     "    def __init__(self, size):\n",
-    "        # TODO: Implement me\n",
-    "        pass\n",
+    "        self.size = size\n",
+    "        self.table = []\n",
+    "        for i in range(size):\n",
+    "            self.table.append([])\n",
+    "            \n",
     "\n",
     "    def _hash_function(self, key):\n",
-    "        # TODO: Implement me\n",
-    "        pass\n",
+    "        return key % self.size\n",
     "\n",
     "    def set(self, key, value):\n",
-    "        # TODO: Implement me\n",
-    "        pass\n",
+    "        hashed_key = self._hash_function(key)\n",
+    "        items_with_same_hash = self.table[hashed_key]\n",
+    "        for index, item in enumerate(items_with_same_hash):\n",
+    "            if item.key == key:\n",
+    "                items_with_same_hash[index].value = value\n",
+    "                return\n",
+    "        items_with_same_hash.append(Item(key, value))\n",
     "\n",
     "    def get(self, key):\n",
-    "        # TODO: Implement me\n",
-    "        pass\n",
+    "        hashed_key = self._hash_function(key)\n",
+    "        print(hashed_key)\n",
+    "        items_with_same_hash = self.table[hashed_key]\n",
+    "        for item in items_with_same_hash:\n",
+    "            if item.key == key:\n",
+    "                return item.value\n",
+    "        raise KeyError('MISSING KEY')\n",
+    "         \n",
     "\n",
     "    def remove(self, key):\n",
-    "        # TODO: Implement me\n",
-    "        pass"
+    "        hashed_key = self._hash_function(key)\n",
+    "        items_with_same_hash = self.table[hashed_key]\n",
+    "        for index, item in enumerate(items_with_same_hash):\n",
+    "            if item.key == key:\n",
+    "                del items_with_same_hash[index]\n",
+    "                return\n",
+    "        raise KeyError('MISSING KEY')"
    ]
   },
   {
@@ -130,9 +148,32 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 9,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Test: get on an empty hash table index\n",
+      "0\n",
+      "Test: set on an empty hash table index\n",
+      "0\n",
+      "1\n",
+      "Test: set on a non empty hash table index\n",
+      "0\n",
+      "0\n",
+      "Test: set on a key that already exists\n",
+      "0\n",
+      "0\n",
+      "Test: remove on a key that already exists\n",
+      "0\n",
+      "0\n",
+      "Test: remove on a key that doesn't exist\n",
+      "Success: test_end_to_end\n"
+     ]
+    }
+   ],
    "source": [
     "# %load test_hash_map.py\n",
     "import unittest\n",
@@ -196,7 +237,7 @@
  ],
  "metadata": {
   "kernelspec": {
-   "display_name": "Python 3",
+   "display_name": "Python 3 (ipykernel)",
    "language": "python",
    "name": "python3"
   },
@@ -210,7 +251,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.7.2"
+   "version": "3.10.6"
   }
  },
  "nbformat": 4,
diff --git a/arrays_strings/permutation/permutation_challenge.ipynb b/arrays_strings/permutation/permutation_challenge.ipynb
index eece64f..afb7c15 100644
--- a/arrays_strings/permutation/permutation_challenge.ipynb
+++ b/arrays_strings/permutation/permutation_challenge.ipynb
@@ -78,15 +78,28 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 5,
    "metadata": {},
    "outputs": [],
    "source": [
     "class Permutations(object):\n",
     "\n",
     "    def is_permutation(self, str1, str2):\n",
-    "        # TODO: Implement me\n",
-    "        pass"
+    "        if str1 == None or str2 == None:\n",
+    "            return False\n",
+    "        if len(str1) != len(str2):\n",
+    "            return False\n",
+    "        dict1, dict2 = {}, {}\n",
+    "        for ch in str1:\n",
+    "            dict1.setdefault(ch, 0)\n",
+    "            dict1[ch] += 1\n",
+    "        for ch in str2:\n",
+    "            dict2.setdefault(ch, 0)\n",
+    "            dict2[ch] += 1\n",
+    "        if dict1 == dict2:\n",
+    "            return True\n",
+    "        else:\n",
+    "            return False"
    ]
   },
   {
@@ -107,9 +120,17 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 6,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Success: test_permutation\n"
+     ]
+    }
+   ],
    "source": [
     "# %load test_permutation_solution.py\n",
     "import unittest\n",
@@ -152,11 +173,18 @@
     "\n",
     "Review the [Solution Notebook](http://nbviewer.ipython.org/github/donnemartin/interactive-coding-challenges/blob/master/arrays_strings/permutation/permutation_solution.ipynb) for a discussion on algorithms and code solutions."
    ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": []
   }
  ],
  "metadata": {
   "kernelspec": {
-   "display_name": "Python 3",
+   "display_name": "Python 3 (ipykernel)",
    "language": "python",
    "name": "python3"
   },
@@ -170,7 +198,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.7.2"
+   "version": "3.10.6"
   }
  },
  "nbformat": 4,
